name: 'CI/CD Pipeline'

on:
  pull_request:
    branches: [ "main" ]
    types: [ closed ]

env:
  ECR_REPOSITORY: 084477714284.dkr.ecr.us-east-1.amazonaws.com/techchallenge-eks
  DOCKER_IMAGE_NAME: docker-image-api-cliente
  K8S_DEPLOYMENT_NAME: app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks out your repository code so that it can be built
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up JDK 17, which is required for building Java applications using Maven
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Caches Maven dependencies to speed up subsequent builds
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      # Builds the application using Maven, skipping tests to save time
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Configure AWS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Logs in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Builds the Docker image
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }} .

      # Tags the Docker image with the ECR repository URL
      - name: Tag Docker image
        run: docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.ECR_REPOSITORY }}:latest

      # Saves the Docker image as an artifact
      - name: Save Docker image as artifact
        run: docker save ${{ env.ECR_REPOSITORY }}:latest -o ${{ env.DOCKER_IMAGE_NAME }}.tar

      # Uploads the Docker image artifact to be used in the deploy job
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DOCKER_IMAGE_NAME }}
          path: ./${{ env.DOCKER_IMAGE_NAME }}.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Configure AWS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Logs in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Downloads the Docker image artifact from the previous job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOCKER_IMAGE_NAME }}

      # Loads the Docker image from the artifact
      - name: Load Docker image
        run: docker load -i ./${{ env.DOCKER_IMAGE_NAME }}.tar

      - name: List Docker images
        run: docker images

      - name: Push Docker image to ECR
        run: docker push ${{ env.ECR_REPOSITORY }}:latest